makeCacheMatrix <- function(x = matrix()) {
a<-NULL
set<-function(y){
x<<-y
a<<-NULL
}
get<-function()x
setinverse<-function(inverse) a<<-inverse
getinverse <-function() a
list(set=set,
get= get,
setinverse=setinverse,
getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a<-x$getinverse ()
if (!is.null(a)) {
message("getting cached data")
return(a)
}
mat<-x$get()
a<-solve(mat,...)
a
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
a<-x$getinverse ()
if (!is.null(a)) {
message("getting cached data")
return(a)
}
mat<-x$get()
a<-solve(mat,...)
x$setinverse(a)
a
}
set,seed(69)
set.seed(69)
my_mat <- matrix(sample(9), nrow = 3)
my_mat
my_cache <- makeCacheMatrix(my_mat)
cacheSolve(my_cache)
pwd
